name: "Setup EvaP Testing Environment"
description: "Sets up the nix environment with caching and copy localsettings"

inputs:
  shell:
    description: "name of development shell to use"
    required: false
    default: .#evap-dev
  start-db:
    description: "whether or not to run the database in the background"
    required: false
    default: false
  npm-ci:
    description: "whether or not to run `npm ci`"
    required: false
    default: false

runs:
  using: "composite"
  steps:
    - uses: nixbuild/nix-quick-install-action@v27
    - name: Restore and cache Nix store
      uses: nix-community/cache-nix-action@v5
      with:
        # restore and save a cache using this key
        primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix') }}
        # if there's no cache hit, restore a cache by this prefix
        restore-prefixes-first-match: nix-${{ runner.os }}-
        # collect garbage until Nix store size (in bytes) is at most this number
        # before trying to save a new cache
        gc-max-store-size-linux: 1073741824
        # do purge caches
        purge: true
        # purge all versions of the cache
        purge-prefixes: cache-${{ runner.os }}-
        # created more than this number of seconds ago relative to the start of the `Post Restore` phase
        purge-created: 0
        # except the version with the `primary-key`, if it exists
        purge-primary-key: never
    - uses: nicknovitski/nix-develop@v1
      with:
        arguments: "${{ inputs.shell }}"

    - name: Add localsettings
      run: cp evap/settings_test.py evap/localsettings.py
      shell: bash

    - name: Install Node dependencies
      run: npm ci
      shell: bash
      if: ${{ inputs.npm-ci }}

    - name: Start database
      run: nix run .#services -- --detached && nix run .#wait-for-pc
      shell: bash
      if: ${{ inputs.start-db }}
